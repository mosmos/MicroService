node('master') {
    timestamps {
        String aws_credential_id = ""
        String aws_access_id = ""
        String aws_secret_key = ""

        stage('initialize') {
            def gitRepo = checkout scm
            // String git_url = gitRepo.GIT_URL
            git_branch = gitRepo.GIT_BRANCH.tokenize('/')[-1]
            String git_commit_id = gitRepo.GIT_COMMIT
            String git_short_commit_id = "${git_commit_id[0..6]}"


            String buildTime = sh(returnStdout: true, script: "date +'%Y.%V'").trim()
            currentBuild.displayName = (buildTime + "." + currentBuild.number + "." + git_branch + "." + git_short_commit_id)

            withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'terraform_aws',
                    usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
                aws_access_id = USERNAME
                aws_secret_key = PASSWORD
            }
            if(!aws_access_id) {
                error("AWS access key is empty or not defined.")
            }
            if(!aws_secret_key) {
                error("AWS secret key is empty or not defined.")
            }
        }

        stage('tf-plan') {

        dir("infrastructure/ecs_terraform/") {


            wrap([$class: 'MaskPasswordsBuildWrapper', varPasswordPairs: [[password: aws_secret_key, var: 'AWS_SECRET']]]) {
                sh """
                export AWS_ACCESS_KEY_ID=${aws_access_id}
                export AWS_SECRET_ACCESS_KEY=${aws_secret_key}
                terraform init -backend-config=key=fargate-state-${branch}.tfstate -reconfigure
                TF_VAR_docker_image=$docker_image
                if(git_branch == 'master')
                {
                TF_VAR_cluster_name=microservice
                }
                else
                {
                 TF_VAR_cluster_name=git_branch-microservice
                }
                terraform plan -no-color
                """

               }
            }

        }

        stage('tf-apply') {

        dir("infrastructure/ecs_terraform/") {
        if(Plan_Only.equalsIgnoreCase('true') | (Destroy_the_Environment.equalsIgnoreCase('true')) )  {
            println "Plan only run. Skipping Terraform apply."
        }
        else {
           input 'WARNING: Applying Terraform updates can result in unrecoverable destruction. Click "Proceed" to confirm Terraform update plan was reviewed and to authorize the updates to be applied, else click "Abort".'
           wrap([$class: 'MaskPasswordsBuildWrapper', varPasswordPairs: [[password: aws_secret_key, var: 'AWS_SECRET']]]) {
               sh """
               export AWS_ACCESS_KEY_ID=${aws_access_id}
               export AWS_SECRET_ACCESS_KEY=${aws_secret_key}
               terraform init -backend-config=key=fargate-state-${branch}.tfstate -reconfigure
               TF_VAR_docker_image=$docker_image
               if(git_branch == 'master')
               {
               TF_VAR_cluster_name=microservice
               }
               else
               {
                TF_VAR_cluster_name=git_branch-microservice
               }
                terraform apply -no-color -auto-approve
               """

                }

            }
            }

        }


        stage('verify-endpoint')
        {
            echo 'Access URL for swagger'
            sleep 60;
            curl '${aws_alb.main.dns_name}:${var.alb_port}/healthz'

        }
        stage('tf-destroy') {

        dir("infrastructure/ecs_terraform/") {
        if(Destroy_the_Environment.equalsIgnoreCase('true')) {
        input 'WARNING: Applying Terraform destroy can result in unrecoverable destruction. Click "Proceed" to confirm Terraform update plan  to destroy was reviewed and to authorize the updates to be applied, else click "Abort".'
        wrap([$class: 'MaskPasswordsBuildWrapper', varPasswordPairs: [[password: aws_secret_key, var: 'AWS_SECRET']]]) {
            sh """
            export AWS_ACCESS_KEY_ID=${aws_access_id}
            export AWS_SECRET_ACCESS_KEY=${aws_secret_key}
            terraform init -backend-config=key=fargate-state-${branch}.tfstate -reconfigure
            TF_VAR_docker_image=$docker_image
            if(git_branch == 'master')
            {
            TF_VAR_cluster_name=microservice
            }
            else
            {
             TF_VAR_cluster_name=git_branch-microservice
            }
             terraform destroy -no-color -force

            """
        }
        }
        else {

            println "Plan only run. Skipping Terraform apply."
                }

            }
            }
       cleanWs()
        }
    }
