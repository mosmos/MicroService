node('master') {
    timestamps {
        String aws_credential_id = ""
        String aws_access_id = ""
        String aws_secret_key = ""
        def stage_name
        def nodes_ip

        stage('initialize') {
            def gitRepo = checkout scm
            // String git_url = gitRepo.GIT_URL
            git_branch = gitRepo.GIT_BRANCH.tokenize('/')[-1]
            String git_commit_id = gitRepo.GIT_COMMIT
            String git_short_commit_id = "${git_commit_id[0..6]}"

            String buildTime = sh(returnStdout: true, script: "date +'%Y.%V'").trim()
            currentBuild.displayName = (buildTime + "." + currentBuild.number + "." + git_branch + "." + git_short_commit_id)

            withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'terraform_aws',
                    usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
                aws_access_id = USERNAME
                aws_secret_key = PASSWORD
            }
            if(!aws_access_id) {
                error("AWS access key is empty or not defined.")
            }
            if(!aws_secret_key) {
                error("AWS secret key is empty or not defined.")
            }
        }

        stage('application-deployment') {

          if (helm_deploy.equalsIgnoreCase('true'))
          dir("helm/microservice-stack")
          {
            wrap([$class: 'MaskPasswordsBuildWrapper', varPasswordPairs: [[password: aws_secret_key, var: 'AWS_SECRET']]]) {
                sh """
                export AWS_ACCESS_KEY_ID=${aws_access_id}
                export AWS_SECRET_ACCESS_KEY=${aws_secret_key}
                aws s3 cp s3://tf-state-eks-cluster/"${git_branch}"-admin.config $HOME/.kube/config
                kubectl create sa tiller -n kube-system
                kubectl create ns ms-stack
                kubectl create clusterrolebinding tiller-binding --clusterrole=cluster-admin --serviceaccount=kube-system:tiller
                helm init --service-account tiller --wait
                helm install --name ms-stack --namespace=ms-stack .
                node_ip=`kubectl get nodes --namespace ms-stack -o jsonpath="{.items[0].status.addresses[1].address}"`

                echo "To Access Application Enter <node_ip>:<application_nodeport>"

                echo "http://${'$'}node_ip:<application_nodeport>"

                rm -rf $HOME/.kube/config
                """
                nodes_ip = sh (script: 'cat $HOME/.nodeip', returnStdout: true)
                stage_name="application-deployment"
               }
            }

        }

        stage('Application Update')
        {
            if (helm_update.equalsIgnoreCase('true'))
            dir("helm/microservice-stack")
            {
            wrap([$class: 'MaskPasswordsBuildWrapper', varPasswordPairs: [[password: aws_secret_key, var: 'AWS_SECRET']]]) {
                sh """
                export AWS_ACCESS_KEY_ID=${aws_access_id}
                export AWS_SECRET_ACCESS_KEY=${aws_secret_key}
                aws s3 cp s3://tf-state-eks-cluster/"${git_branch}"-admin.config $HOME/.kube/config
                helm upgrade ms-stack -f value.yaml .
                rm -rf $HOME/.kube/config
                """
                stage_name="Application-update"
            }
        }
      }
      stage('Application Delete')
        {
            if (helm_delete.equalsIgnoreCase('true'))

            {
            wrap([$class: 'MaskPasswordsBuildWrapper', varPasswordPairs: [[password: aws_secret_key, var: 'AWS_SECRET']]]) {
                sh """
                export AWS_ACCESS_KEY_ID=${aws_access_id}
                export AWS_SECRET_ACCESS_KEY=${aws_secret_key}
                aws s3 cp s3://tf-state-eks-cluster/"${git_branch}"-admin.config $HOME/.kube/config
                helm delete --purge ms-stack
                kubectl delete clusterrolebinding tiller-binding
                kubectl delete sa tiller -n kube-system
                kubectl delete ns ms-stack
                helm reset --force
                rm -rf $HOME/.kube/config
                """
                stage_name="Application-delete"
            }
          }
        }

        stage('Mail') {
        echo 'Job Status Email'
           if(helm_deploy.equalsIgnoreCase('true') | (helm_update.equalsIgnoreCase('true')) ) {
           emailext attachLog: true, body: "${currentBuild.currentResult}: Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}\n More info at: ${env.BUILD_URL}\n Node IP Address: http:\\${nodes_ip}\n Helm Action Performed: ${stage_name}",
           subject: "Jenkins Build Status ${currentBuild.currentResult}: Job ${env.JOB_NAME}",
           to: 'tushar@xenonstack.com'
           }
           else{
               emailext attachLog: true, body: "${currentBuild.currentResult}: Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}\n More info at: ${env.BUILD_URL}\n Helm Action Performed: ${stage_name}",
               subject: "Jenkins Build Status ${currentBuild.currentResult}: Job ${env.JOB_NAME}",
               to: 'tushar@xenonstack.com'
               }
         }

       cleanWs()
        }
    }
